<?xml version="1.0"?>
<doc>
    <assembly>
        <name>COG</name>
    </assembly>
    <members>
        <member name="T:COG.ConectedComponents.Component">
            <summary>
            Class to contain the list of nodes belonging to the same component.
            </summary>
        </member>
        <member name="T:COG.ConectedComponents.DepthFirstSearchCC">
            <summary>
            Solver for connected components using a simple depth first search. To be used for undirected graphs
            as it is quicker than other specialized algorithms.
            </summary>
        </member>
        <member name="T:COG.ConectedComponents.IConnectedComponentsSolver">
            <summary>
            Interface for connected components solvers.
            </summary>
        </member>
        <member name="M:COG.ConectedComponents.IConnectedComponentsSolver.Solve(COG.Graphs.BaseGraph)">
            <summary>
            Obtain a list of connected components in the graph.
            </summary>
            <param name="baseGraph">Graph to obtain connected components from.</param>
            <returns>List of components obtained from the graph.</returns>
        </member>
        <member name="T:COG.ConectedComponents.KosarajuSharirSCC">
            <summary>
            Strongly-Connected-Components Solver algorithm based on an algorithm proposed by Kosaraju and Sharir.
            </summary>
        </member>
        <member name="T:COG.ConectedComponents.MissingConnectedComponentsSolverException">
            <summary>
            Exception to be used when no CC solver is implemented in the graph.
            </summary>
        </member>
        <member name="T:COG.Graphs.BaseGraph">
            <summary>
            Base graph class.
            </summary>
        </member>
        <member name="F:COG.Graphs.BaseGraph.representation">
            <summary>
            Graph representation.
            </summary>
        </member>
        <member name="F:COG.Graphs.BaseGraph.mstSolver">
            <summary>
            Solver for MST.
            </summary>
        </member>
        <member name="F:COG.Graphs.BaseGraph.ccSolver">
            <summary>
            Solver for connected components.
            </summary>
        </member>
        <member name="P:COG.Graphs.BaseGraph.Nodes">
            <summary>
            Gets or sets the Nodes.
            Number of nodes in the graph.
            </summary>
        </member>
        <member name="P:COG.Graphs.BaseGraph.Edges">
            <summary>
            Gets the Edges.
            Number of edges in the graph.
            </summary>
        </member>
        <member name="P:COG.Graphs.BaseGraph.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the edges of the graph.
            </summary>
            <param name="node1">Source node.</param>
            <param name="node2">Destination node.</param>
            <returns>Double value representing the cost of the searched edge.</returns>
        </member>
        <member name="P:COG.Graphs.BaseGraph.MSTSolver">
            <summary>
            Gets or sets the MSTSolver
            </summary>
        </member>
        <member name="P:COG.Graphs.BaseGraph.ConnectedComponentsSolver">
            <summary>
            Gets or sets the ConnectedComponentsSolver.
            </summary>
        </member>
        <member name="M:COG.Graphs.BaseGraph.#ctor(COG.Representations.BaseRepresentation)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.Graphs.BaseGraph"/> class.
            </summary>
            <param name="representation">Graph representation.</param>
        </member>
        <member name="M:COG.Graphs.BaseGraph.GetMinimumSpanningTree">
            <summary>
            Return the minimum spanning tree.
            </summary>
            <returns>List of edges defining the MST.</returns>
        </member>
        <member name="M:COG.Graphs.BaseGraph.GetConnectedComponents">
            <summary>
            Return the components of the graph.
            </summary>
            <returns>List of all components.</returns>
        </member>
        <member name="M:COG.Graphs.BaseGraph.AddEdge(COG.Representations.Edge)">
            <summary>
            Add an edge to the graph.
            </summary>
            <param name="baseEdge">Structure containing the edge details.</param>
        </member>
        <member name="M:COG.Graphs.BaseGraph.RemoveEdge(COG.Representations.Edge)">
            <summary>
            Remove edge from the graph.
            </summary>
            <param name="baseEdge">Structure containing the edge details.</param>
        </member>
        <member name="M:COG.Graphs.BaseGraph.GetEdges(System.Int32)">
            <summary>
            Get a list of all edges from given node id.
            </summary>
            <param name="nodeId">Id of given node.</param>
            <returns>List of all edges from given node.</returns>
        </member>
        <member name="M:COG.Graphs.BaseGraph.GetTranspose(COG.Graphs.BaseGraph)">
            <summary>
            Populate the provided <see cref="T:COG.Graphs.BaseGraph"/> with the transpose of current graph.
            </summary>
            <param name="transposeGraph">Graph to be populated with the transposed edges.</param>
            <returns>Transposed graph.</returns>
        </member>
        <member name="T:COG.Graphs.DirectedGraph">
            <summary>
            Class for directed graphs.
            </summary>
        </member>
        <member name="M:COG.Graphs.DirectedGraph.#ctor(COG.Representations.BaseRepresentation)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.Graphs.DirectedGraph"/> class.
            </summary>
            <param name="representation"></param>
        </member>
        <member name="T:COG.Graphs.MissingRepresentationException">
            <summary>
            Exception used for missing representations in a graph.
            </summary>
        </member>
        <member name="T:COG.Graphs.UndirectedGraph">
            <summary>
            Class for undirected graphs.
            </summary>
        </member>
        <member name="P:COG.Graphs.UndirectedGraph.Edges">
            <summary>
            Gets the Edges.
            Number of edges in the graph.
            </summary>
        </member>
        <member name="M:COG.Graphs.UndirectedGraph.#ctor(COG.Representations.BaseRepresentation)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.Graphs.UndirectedGraph"/> class.
            </summary>
            <param name="representation">Representation of the graph nodes.</param>
        </member>
        <member name="M:COG.Graphs.UndirectedGraph.AddEdge(COG.Representations.Edge)">
            <summary>
            Add an edge to the undirected graph.
            </summary>
            <param name="baseEdge">Structure containing the edge details.</param>
        </member>
        <member name="M:COG.Graphs.UndirectedGraph.RemoveEdge(COG.Representations.Edge)">
            <summary>
            Removes an edge from the undirected graph.
            </summary>
            <param name="baseEdge">Structure containing the edge details.</param>
        </member>
        <member name="T:COG.MinimumSpanningTree.IMSTSolver">
            <summary>
            Interface for Minimum Spanning Tree solver.
            </summary>
        </member>
        <member name="M:COG.MinimumSpanningTree.IMSTSolver.Solve(COG.Graphs.BaseGraph)">
            <summary>
            Obtain the minimum spanning tree.
            </summary>
            <param name="baseGraph">Graph to perform MST on.</param>
            <returns>List of edges defining the minimum spanning tree.</returns>
        </member>
        <member name="T:COG.MinimumSpanningTree.MSTSolverMissingException">
            <summary>
            Exception for missing solver for MST.
            </summary>
        </member>
        <member name="M:COG.MinimumSpanningTree.MSTSolverMissingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:COG.MinimumSpanningTree.MSTSolverMissingException"/> class.
            </summary>
        </member>
        <member name="M:COG.MinimumSpanningTree.MSTSolverMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.MinimumSpanningTree.MSTSolverMissingException"/> class.
            </summary>
            <param name="message">The message<see cref="T:System.String"/></param>
        </member>
        <member name="M:COG.MinimumSpanningTree.MSTSolverMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.MinimumSpanningTree.MSTSolverMissingException"/> class.
            </summary>
            <param name="message">The message<see cref="T:System.String"/></param>
            <param name="innerException">The innerException<see cref="T:System.Exception"/></param>
        </member>
        <member name="M:COG.MinimumSpanningTree.MSTSolverMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.MinimumSpanningTree.MSTSolverMissingException"/> class.
            </summary>
            <param name="info">The info<see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context">The context<see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
        </member>
        <member name="T:COG.MinimumSpanningTree.PrimMST">
            <summary>
            MST solver using Prim's algorithm.
            </summary>
        </member>
        <member name="T:COG.Representations.BaseRepresentation">
            <summary>
            Base class for representations of graphs.
            To be used for inheritance.
            </summary>
        </member>
        <member name="P:COG.Representations.BaseRepresentation.Nodes">
            <summary>
            Gets or sets the Nodes.
            Number of nodes in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.BaseRepresentation.Edges">
            <summary>
            Gets the Edges.
            Number of vertices in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.BaseRepresentation.Item(System.Int32,System.Int32)">
            <summary>
            Returns cost of edge between the provided nodes.
            </summary>
            <param name="index1">Source node.</param>
            <param name="index2">Destination node.</param>
            <returns>Cost of the edge.</returns>
        </member>
        <member name="M:COG.Representations.BaseRepresentation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.Representations.BaseRepresentation"/> class.
            </summary>
            <param name="N">Forecast number of nodes in the graph.</param>
        </member>
        <member name="M:COG.Representations.BaseRepresentation.AddEdge(COG.Representations.Edge)">
            <summary>
            Add an edge to the representation.
            </summary>
            <param name="edge">Structure containing the edge data.</param>
        </member>
        <member name="M:COG.Representations.BaseRepresentation.RemoveEdge(COG.Representations.Edge)">
            <summary>
            Remove an edge from the representation.
            </summary>
            <param name="edge">Structure containing the edge data.</param>
        </member>
        <member name="M:COG.Representations.BaseRepresentation.GetEdges(System.Int32)">
            <summary>
            Get list of edges from provided node id.
            </summary>
            <param name="nodeId">Id of node.</param>
            <returns>List of edges from the current node.</returns>
        </member>
        <member name="T:COG.Representations.Edge">
            <summary>
            Bas edge structure holding edge values.
            </summary>
        </member>
        <member name="P:COG.Representations.Edge.From">
            <summary>
            Gets or sets the From.
            Id of source node.
            </summary>
        </member>
        <member name="P:COG.Representations.Edge.To">
            <summary>
            Gets or sets the To.
            Id of destination node.
            </summary>
        </member>
        <member name="P:COG.Representations.Edge.Cost">
            <summary>
            Gets or sets the Cost.
            Cost of the edge.
            </summary>
        </member>
        <member name="M:COG.Representations.Edge.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.Representations.Edge"/> class.
            </summary>
            <param name="from">ID of source node.</param>
            <param name="to">ID of destination node.</param>
            <param name="cost">Cost of edge.</param>
        </member>
        <member name="T:COG.Representations.ListRepresentation">
            <summary>
            List representation of a graph.
            </summary>
        </member>
        <member name="T:COG.Representations.ListRepresentation.AdjEntry">
            <summary>
            Defines the <see cref="T:COG.Representations.ListRepresentation.AdjEntry" />
            </summary>
        </member>
        <member name="F:COG.Representations.ListRepresentation.AdjEntry.ToId">
            <summary>
            Defines the ToId
            </summary>
        </member>
        <member name="F:COG.Representations.ListRepresentation.AdjEntry.Cost">
            <summary>
            Defines the Cost
            </summary>
        </member>
        <member name="F:COG.Representations.ListRepresentation.adjList">
            <summary>
            Defines the adjList
            </summary>
        </member>
        <member name="F:COG.Representations.ListRepresentation.edges">
            <summary>
            Defines the edges
            </summary>
        </member>
        <member name="P:COG.Representations.ListRepresentation.Nodes">
            <summary>
            Gets or sets the Nodes
            Number of nodes in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.ListRepresentation.Edges">
            <summary>
            Gets the Edges
            Number of edges in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.ListRepresentation.Item(System.Int32,System.Int32)">
            <summary>
            Access edges using indexes.
            </summary>
            <param name="index1">Starting node id.</param>
            <param name="index2">Ending node id.</param>
            <returns>1 is an edge exists and 0 if no edge exists.</returns>
            <remarks>
            When setting an edge value, this representation is unweighted, thus, if the value is equal and over 1, it will be set to 1, 
            otherwise it will be set to 0. If you want specific costs, use a weighted representation.
            </remarks>
        </member>
        <member name="M:COG.Representations.ListRepresentation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.Representations.ListRepresentation"/> class.
            </summary>
            <param name="N">Forecasted number of nodes.</param>
        </member>
        <member name="M:COG.Representations.ListRepresentation.AddEdge(COG.Representations.Edge)">
            <summary>
            Adds edge to the graph.
            </summary>
            <param name="edge">Edge to be added.</param>
        </member>
        <member name="M:COG.Representations.ListRepresentation.RemoveEdge(COG.Representations.Edge)">
            <summary>
            Removes the specified edge from the graph.
            </summary>
            <param name="edge">Edge structure containing the edge informations.</param>
        </member>
        <member name="M:COG.Representations.ListRepresentation.GetEdges(System.Int32)">
            <summary>
            Get all edges from specified node.
            </summary>
            <param name="nodeId">Id of specified node.</param>
            <returns>List of edges from provided node.</returns>
        </member>
        <member name="M:COG.Representations.ListRepresentation.GetEdgeCost(System.Int32,System.Int32)">
            <summary>
            The GetEdgeCost
            </summary>
            <param name="fromId">The fromId<see cref="T:System.Int32"/></param>
            <param name="toId">The toId<see cref="T:System.Int32"/></param>
            <returns>The <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:COG.Representations.ListRepresentation.GetEntry(System.Int32,System.Int32)">
            <summary>
            The GetEntry
            </summary>
            <param name="fromId">The fromId<see cref="T:System.Int32"/></param>
            <param name="toId">The toId<see cref="T:System.Int32"/></param>
            <returns>The <see cref="T:COG.Representations.ListRepresentation.AdjEntry"/></returns>
        </member>
        <member name="M:COG.Representations.ListRepresentation.SetEdgeCost(System.Int32,System.Int32,System.Double)">
            <summary>
            The SetEdgeCost
            </summary>
            <param name="fromId">The fromId<see cref="T:System.Int32"/></param>
            <param name="toId">The toId<see cref="T:System.Int32"/></param>
            <param name="cost">The cost<see cref="T:System.Double"/></param>
        </member>
        <member name="T:COG.Representations.MatrixRepresentation">
            <summary>
            Matrix representation of a graph.
            </summary>
        </member>
        <member name="F:COG.Representations.MatrixRepresentation.adjMatrix">
            <summary>
            Defines the adjMatrix
            </summary>
        </member>
        <member name="F:COG.Representations.MatrixRepresentation.edges">
            <summary>
            Defines the edges
            </summary>
        </member>
        <member name="F:COG.Representations.MatrixRepresentation.nodes">
            <summary>
            Defines the nodes
            </summary>
        </member>
        <member name="P:COG.Representations.MatrixRepresentation.Nodes">
            <summary>
            Gets or sets the Nodes
            Number of nodes in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.MatrixRepresentation.Edges">
            <summary>
            Gets the Edges
            Number of edges in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.MatrixRepresentation.Item(System.Int32,System.Int32)">
            <summary>
            Access edges using indexes.
            </summary>
            <param name="index1">Starting node id.</param>
            <param name="index2">Ending node id.</param>
            <returns>1 is an edge exists and 0 if no edge exists.</returns>
            <remarks>
            When setting an edge value, this representation is unweighted, thus, if the value is equal and over 1, it will be set to 1, 
            otherwise it will be set to 0. If you want specific costs, use a weighted representation.
            </remarks>
        </member>
        <member name="M:COG.Representations.MatrixRepresentation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.Representations.MatrixRepresentation"/> class.
            </summary>
            <param name="N">Forecasted number of nodes.</param>
        </member>
        <member name="M:COG.Representations.MatrixRepresentation.AddEdge(COG.Representations.Edge)">
            <summary>
            Adds edge to the graph.
            </summary>
            <param name="edge">Edge to be added.</param>
        </member>
        <member name="M:COG.Representations.MatrixRepresentation.RemoveEdge(COG.Representations.Edge)">
            <summary>
            Removes the specified edge from the graph.
            </summary>
            <param name="edge">Edge structure containing the edge informations.</param>
        </member>
        <member name="M:COG.Representations.MatrixRepresentation.GetEdges(System.Int32)">
            <summary>
            Gets a list of all edges from specified node.
            </summary>
            <param name="nodeId">Id of specified node.</param>
            <returns>All edges from specified node.</returns>
        </member>
        <member name="T:COG.Representations.WeightedListRepresentation">
            <summary>
            Weighted list representation for a graph.
            </summary>
        </member>
        <member name="T:COG.Representations.WeightedListRepresentation.AdjEntry">
            <summary>
            Defines the <see cref="T:COG.Representations.WeightedListRepresentation.AdjEntry" />
            </summary>
        </member>
        <member name="F:COG.Representations.WeightedListRepresentation.AdjEntry.ToId">
            <summary>
            Defines the ToId
            </summary>
        </member>
        <member name="F:COG.Representations.WeightedListRepresentation.AdjEntry.Cost">
            <summary>
            Defines the Cost
            </summary>
        </member>
        <member name="F:COG.Representations.WeightedListRepresentation.adjList">
            <summary>
            Defines the adjList
            </summary>
        </member>
        <member name="F:COG.Representations.WeightedListRepresentation.edges">
            <summary>
            Defines the edges
            </summary>
        </member>
        <member name="P:COG.Representations.WeightedListRepresentation.Nodes">
            <summary>
            Gets or sets the Nodes
            Number of nodes in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.WeightedListRepresentation.Edges">
            <summary>
            Gets the Edges
            Number of edges in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.WeightedListRepresentation.Item(System.Int32,System.Int32)">
            <summary>
            Access edges using indexes.
            </summary>
            <param name="index1">Starting node id.</param>
            <param name="index2">Ending node id.</param>
            <returns>Edge weight if an edge exists and 0 if no edge exists.</returns>
        </member>
        <member name="M:COG.Representations.WeightedListRepresentation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.Representations.WeightedListRepresentation"/> class.
            </summary>
            <param name="N">Forecasted number of nodes.</param>
        </member>
        <member name="M:COG.Representations.WeightedListRepresentation.AddEdge(COG.Representations.Edge)">
            <summary>
            Adds edge to the graph.
            </summary>
            <param name="edge">Edge to be added.</param>
        </member>
        <member name="M:COG.Representations.WeightedListRepresentation.RemoveEdge(COG.Representations.Edge)">
            <summary>
            Removes the specified edge from the graph.
            </summary>
            <param name="edge">Edge structure containing the edge informations.</param>
        </member>
        <member name="M:COG.Representations.WeightedListRepresentation.GetEdges(System.Int32)">
            <summary>
            Get all the edges from specified node.
            </summary>
            <param name="nodeId">Id of specified node.</param>
            <returns>List of all edges from provided node.</returns>
        </member>
        <member name="M:COG.Representations.WeightedListRepresentation.GetEdgeCost(System.Int32,System.Int32)">
            <summary>
            The GetEdgeCost
            </summary>
            <param name="fromId">The fromId<see cref="T:System.Int32"/></param>
            <param name="toId">The toId<see cref="T:System.Int32"/></param>
            <returns>The <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:COG.Representations.WeightedListRepresentation.GetEntry(System.Int32,System.Int32)">
            <summary>
            The GetEntry
            </summary>
            <param name="fromId">The fromId<see cref="T:System.Int32"/></param>
            <param name="toId">The toId<see cref="T:System.Int32"/></param>
            <returns>The <see cref="T:COG.Representations.WeightedListRepresentation.AdjEntry"/></returns>
        </member>
        <member name="M:COG.Representations.WeightedListRepresentation.SetEdgeCost(System.Int32,System.Int32,System.Double)">
            <summary>
            The SetEdgeCost
            </summary>
            <param name="fromId">The fromId<see cref="T:System.Int32"/></param>
            <param name="toId">The toId<see cref="T:System.Int32"/></param>
            <param name="cost">The cost<see cref="T:System.Double"/></param>
        </member>
        <member name="T:COG.Representations.WeightedMatrixRepresentation">
            <summary>
            Weighted matrix representation for a graph.
            </summary>
        </member>
        <member name="F:COG.Representations.WeightedMatrixRepresentation.edges">
            <summary>
            Defines the edges
            </summary>
        </member>
        <member name="F:COG.Representations.WeightedMatrixRepresentation.adjMatrix">
            <summary>
            Defines the adjMatrix
            </summary>
        </member>
        <member name="F:COG.Representations.WeightedMatrixRepresentation.nodes">
            <summary>
            Defines the nodes
            </summary>
        </member>
        <member name="P:COG.Representations.WeightedMatrixRepresentation.Nodes">
            <summary>
            Gets or sets the Nodes
            Number of nodes in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.WeightedMatrixRepresentation.Edges">
            <summary>
            Gets the Edges
            Number of edges in the graph.
            </summary>
        </member>
        <member name="P:COG.Representations.WeightedMatrixRepresentation.Item(System.Int32,System.Int32)">
            <summary>
            Access edges using indexes.
            </summary>
            <param name="index1">Starting node id.</param>
            <param name="index2">Ending node id.</param>
            <returns>Edge weight if an edge exists and 0 if no edge exists.</returns>
        </member>
        <member name="M:COG.Representations.WeightedMatrixRepresentation.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:COG.Representations.WeightedMatrixRepresentation"/> class.
            </summary>
            <param name="N">Forecasted number of nodes.</param>
        </member>
        <member name="M:COG.Representations.WeightedMatrixRepresentation.AddEdge(COG.Representations.Edge)">
            <summary>
            Adds edge to the graph.
            </summary>
            <param name="edge">Edge to be added.</param>
        </member>
        <member name="M:COG.Representations.WeightedMatrixRepresentation.RemoveEdge(COG.Representations.Edge)">
            <summary>
            Removes the specified edge from the graph.
            </summary>
            <param name="edge">Edge structure containing the edge informations.</param>
        </member>
        <member name="M:COG.Representations.WeightedMatrixRepresentation.GetEdges(System.Int32)">
            <summary>
            Gets a list of all edges from specified node.
            </summary>
            <param name="nodeId">Id of specified node.</param>
            <returns>All edges from specified node.</returns>
        </member>
    </members>
</doc>
